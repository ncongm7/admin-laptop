import { ref } from 'vue'
import { useToast } from '@/composables/useToast'
import {
    taoKhachHangMoi,
    capNhatKhachHang
} from '@/service/banHangService'

/**
 * Composable qu·∫£n l√Ω kh√°ch h√†ng
 * X·ª≠ l√Ω: t√¨m ki·∫øm, t·∫°o m·ªõi, c·∫≠p nh·∫≠t kh√°ch h√†ng cho h√≥a ƒë∆°n
 */
export function useCustomerManagement(hoaDonHienTai, capNhatHoaDon) {
    const isLoading = ref(false)
    const { success: showSuccess, error: showError } = useToast()

    /**
     * C·∫≠p nh·∫≠t kh√°ch h√†ng cho h√≥a ƒë∆°n
     * N·∫øu customer = null ‚Üí Kh√°ch v√£ng lai
     */
    const handleUpdateCustomer = async (customer) => {
        if (!hoaDonHienTai.value) return

        isLoading.value = true
        try {
            const payload = {
                // N·∫øu customer = null ‚Üí backend s·∫Ω set th√†nh Kh√°ch l·∫ª
                khachHangId: customer ? (customer.userId || customer.id) : null
            }

            console.log('üîÑ [useCustomerManagement] C·∫≠p nh·∫≠t kh√°ch h√†ng:', {
                idHoaDon: hoaDonHienTai.value.id,
                customerId: payload.khachHangId,
                customerName: customer ? customer.hoTen : 'Kh√°ch l·∫ª'
            })

            const response = await capNhatKhachHang(hoaDonHienTai.value.id, payload)

            if (response && response.data) {
                // C·∫≠p nh·∫≠t h√≥a ƒë∆°n
                capNhatHoaDon(response.data)

                const customerName = customer ? customer.hoTen : 'Kh√°ch l·∫ª'
                console.log('‚úÖ C·∫≠p nh·∫≠t kh√°ch h√†ng th√†nh c√¥ng:', customerName)
            }
        } catch (error) {
            console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t kh√°ch h√†ng:', error)
            showError(error.response?.data?.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t kh√°ch h√†ng. Vui l√≤ng th·ª≠ l·∫°i!')
        } finally {
            isLoading.value = false
        }
    }

    /**
     * T√¨m ki·∫øm kh√°ch h√†ng
     */
    const handleSearchCustomer = (keyword) => {
        // Search logic ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong component CustomerInfo
        console.log('T√¨m ki·∫øm kh√°ch h√†ng:', keyword)
    }

    /**
     * T·∫°o kh√°ch h√†ng m·ªõi (s·ª≠ d·ª•ng modal/form thay v√¨ prompt)
     * TODO: Trong t∆∞∆°ng lai c√≥ th·ªÉ t·∫°o modal chuy√™n nghi·ªáp h∆°n
     */
    const handleCreateCustomer = async () => {
        const hoTen = prompt('Nh·∫≠p h·ªç t√™n kh√°ch h√†ng:')
        if (!hoTen || !hoTen.trim()) {
            console.log('‚ö†Ô∏è H·ªßy t·∫°o kh√°ch h√†ng: Kh√¥ng nh·∫≠p t√™n')
            return
        }

        const soDienThoai = prompt('Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i:')
        if (!soDienThoai || !soDienThoai.trim()) {
            console.log('‚ö†Ô∏è H·ªßy t·∫°o kh√°ch h√†ng: Kh√¥ng nh·∫≠p SƒêT')
            return
        }

        isLoading.value = true
        try {
            const payload = {
                hoTen: hoTen.trim(),
                soDienThoai: soDienThoai.trim(),
                email: null,
                diaChi: null
            }

            console.log('‚ûï [useCustomerManagement] T·∫°o kh√°ch h√†ng m·ªõi:', payload)

            const response = await taoKhachHangMoi(payload)

            console.log('üì¶ [useCustomerManagement] Response:', response)

            // Parse response: Backend c√≥ th·ªÉ tr·∫£ v·ªÅ { data: {...} } ho·∫∑c tr·ª±c ti·∫øp {...}
            const newCustomer = response?.data || response

            if (newCustomer && newCustomer.userId) {
                console.log('‚úÖ T·∫°o kh√°ch h√†ng th√†nh c√¥ng:', newCustomer)

                // T·ª± ƒë·ªông g√°n kh√°ch h√†ng m·ªõi cho h√≥a ƒë∆°n hi·ªán t·∫°i
                await handleUpdateCustomer(newCustomer)

                showSuccess(`T·∫°o kh√°ch h√†ng th√†nh c√¥ng!\nT√™n: ${newCustomer.hoTen}\nSƒêT: ${newCustomer.soDienThoai}`)
            } else {
                throw new Error('Response kh√¥ng h·ª£p l·ªá')
            }
        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫°o kh√°ch h√†ng:', error)
            const errorMessage = error.response?.data?.message ||
                error.response?.data?.error ||
                error.message ||
                'Kh√¥ng th·ªÉ t·∫°o kh√°ch h√†ng. Vui l√≤ng th·ª≠ l·∫°i!'
            showError(errorMessage)
        } finally {
            isLoading.value = false
        }
    }

    return {
        // State
        isLoading,

        // Methods
        handleUpdateCustomer,
        handleSearchCustomer,
        handleCreateCustomer
    }
}

