import { ref } from 'vue'

// Confirm dialog state
const confirmState = ref({
    show: false,
    title: '',
    message: '',
    confirmText: 'X√°c nh·∫≠n',
    cancelText: 'H·ªßy',
    type: 'warning', // warning, danger, info
    onConfirm: null,
    onCancel: null
})

/**
 * Composable ƒë·ªÉ hi·ªÉn th·ªã confirm dialog
 * Dialog hi·ªÉn th·ªã ·ªü gi·ªØa m√†n h√¨nh
 */
export function useConfirm() {
    /**
     * Hi·ªÉn th·ªã confirm dialog
     * @param {Object} options
     * @param {string} options.title - Ti√™u ƒë·ªÅ dialog
     * @param {string} options.message - N·ªôi dung th√¥ng b√°o
     * @param {string} options.confirmText - Text n√∫t x√°c nh·∫≠n (m·∫∑c ƒë·ªãnh: "X√°c nh·∫≠n")
     * @param {string} options.cancelText - Text n√∫t h·ªßy (m·∫∑c ƒë·ªãnh: "H·ªßy")
     * @param {string} options.type - Lo·∫°i dialog: 'warning', 'danger', 'info'
     * @returns {Promise<boolean>} - true n·∫øu confirm, false n·∫øu cancel
     */
    const showConfirm = (options) => {
        return new Promise((resolve) => {
            console.log('üîç [useConfirm] showConfirm ƒë∆∞·ª£c g·ªçi v·ªõi:', options)
            console.log('üîç [useConfirm] Type of options:', typeof options)
            
            // Ki·ªÉm tra v√† x·ª≠ l√Ω options
            if (!options) {
                console.error('‚ùå [useConfirm] showConfirm ƒë∆∞·ª£c g·ªçi v·ªõi options null/undefined')
                options = { message: 'X√°c nh·∫≠n h√†nh ƒë·ªông n√†y?', title: 'X√°c nh·∫≠n' }
            }
            
            if (typeof options !== 'object' && typeof options !== 'string') {
                console.error('‚ùå [useConfirm] showConfirm ƒë∆∞·ª£c g·ªçi v·ªõi options kh√¥ng h·ª£p l·ªá:', options, typeof options)
                options = { message: 'X√°c nh·∫≠n h√†nh ƒë·ªông n√†y?', title: 'X√°c nh·∫≠n' }
            }
            
            // Extract c√°c gi√° tr·ªã t·ª´ options object
            let title = 'X√°c nh·∫≠n'
            let message = ''
            let confirmText = 'X√°c nh·∫≠n'
            let cancelText = 'H·ªßy'
            let type = 'warning'
            
            if (typeof options === 'object') {
                console.log('üîç [useConfirm] Options object keys:', Object.keys(options))
                console.log('üîç [useConfirm] options.message:', options.message, 'type:', typeof options.message)
                
                title = (options.title && typeof options.title === 'string') ? options.title : title
                
                // X·ª≠ l√Ω message c·∫©n th·∫≠n - ƒë·∫£m b·∫£o lu√¥n l√† string
                if (options.message !== undefined && options.message !== null) {
                    if (typeof options.message === 'string') {
                        message = options.message
                        console.log('‚úÖ [useConfirm] Message l√† string:', message)
                    } else if (typeof options.message === 'number' || typeof options.message === 'boolean') {
                        message = String(options.message)
                        console.log('‚úÖ [useConfirm] Message l√† number/boolean, convert:', message)
                    } else if (typeof options.message === 'object') {
                        // N·∫øu message l√† object, log l·ªói v√† l·∫•y thu·ªôc t√≠nh message n·∫øu c√≥
                        console.error('‚ùå [useConfirm] options.message l√† object:', options.message)
                        console.error('‚ùå [useConfirm] options.message keys:', Object.keys(options.message || {}))
                        message = (options.message.message && typeof options.message.message === 'string') 
                            ? options.message.message 
                            : 'C√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã th√¥ng b√°o'
                    } else {
                        message = String(options.message)
                        console.log('‚úÖ [useConfirm] Message convert b·∫±ng String():', message)
                    }
                } else {
                    console.warn('‚ö†Ô∏è [useConfirm] options.message l√† undefined ho·∫∑c null')
                }
                
                confirmText = (options.confirmText && typeof options.confirmText === 'string') ? options.confirmText : confirmText
                cancelText = (options.cancelText && typeof options.cancelText === 'string') ? options.cancelText : cancelText
                type = (options.type && typeof options.type === 'string') ? options.type : type
            } else if (typeof options === 'string') {
                message = options
                console.log('‚úÖ [useConfirm] Options l√† string, d√πng l√†m message:', message)
            }
            
            // Final check: ƒê·∫£m b·∫£o message lu√¥n l√† string
            if (typeof message !== 'string') {
                console.error('‚ùå [useConfirm] message v·∫´n kh√¥ng ph·∫£i string sau khi x·ª≠ l√Ω:', message, typeof message)
                message = message ? String(message) : 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën th·ª±c hi·ªán h√†nh ƒë·ªông n√†y?'
            }
            
            // Trim v√† ki·ªÉm tra message kh√¥ng r·ªóng
            if (!message || message.trim() === '') {
                message = 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën th·ª±c hi·ªán h√†nh ƒë·ªông n√†y?'
            }
            
            console.log('‚úÖ [useConfirm] Final values:', { title, message, confirmText, cancelText, type })
            console.log('‚úÖ [useConfirm] Message type:', typeof message, 'Length:', message.length)
            
            confirmState.value = {
                show: true,
                title: title,
                message: message, // ƒê·∫£m b·∫£o message l√† string
                confirmText: confirmText,
                cancelText: cancelText,
                type: type,
                onConfirm: () => {
                    confirmState.value.show = false
                    resolve(true)
                },
                onCancel: () => {
                    confirmState.value.show = false
                    resolve(false)
                }
            }
            
            console.log('‚úÖ [useConfirm] confirmState.value ƒë∆∞·ª£c set:', {
                show: confirmState.value.show,
                title: confirmState.value.title,
                message: confirmState.value.message,
                messageType: typeof confirmState.value.message
            })
        })
    }

    /**
     * Hi·ªÉn th·ªã confirm dialog v·ªõi format ƒë∆°n gi·∫£n
     * @param {string} message - N·ªôi dung th√¥ng b√°o
     * @param {string} title - Ti√™u ƒë·ªÅ (m·∫∑c ƒë·ªãnh: "X√°c nh·∫≠n")
     * @returns {Promise<boolean>}
     */
    const confirm = async (message, title = 'X√°c nh·∫≠n') => {
        return await showConfirm({
            title,
            message,
            type: 'warning'
        })
    }

    /**
     * Hi·ªÉn th·ªã confirm dialog nguy hi·ªÉm (m√†u ƒë·ªè)
     * @param {string} message - N·ªôi dung th√¥ng b√°o
     * @param {string} title - Ti√™u ƒë·ªÅ (m·∫∑c ƒë·ªãnh: "C·∫£nh b√°o")
     * @returns {Promise<boolean>}
     */
    const confirmDanger = async (message, title = 'C·∫£nh b√°o') => {
        return await showConfirm({
            title,
            message,
            type: 'danger'
        })
    }

    return {
        confirmState,
        showConfirm,
        confirm,
        confirmDanger
    }
}

