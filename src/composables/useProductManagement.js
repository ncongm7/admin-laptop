import { ref, nextTick } from 'vue'
import { useToast } from '@/composables/useToast'
import { useConfirm } from '@/composables/useConfirm'
import {
    themSanPhamVaoHoaDon,
    xoaSanPhamKhoiHoaDon,
    timSanPhamTheoIMEI
} from '@/service/banHangService'

/**
 * Composable qu·∫£n l√Ω s·∫£n ph·∫©m trong h√≥a ƒë∆°n
 * X·ª≠ l√Ω: th√™m s·∫£n ph·∫©m, x√≥a s·∫£n ph·∫©m, modal s·ªë l∆∞·ª£ng, qu√©t IMEI
 */
export function useProductManagement(hoaDonHienTai, capNhatHoaDon) {
    // Toast & Confirm
    const { error: showError, success: showSuccess, warning: showWarning } = useToast()
    const { showConfirm } = useConfirm()

    // State
    const isLoading = ref(false)
    const showQuantityModal = ref(false)
    const selectedProduct = ref(null)
    const soLuongNhap = ref(1)
    const quantityInput = ref(null)

    /**
     * X·ª≠ l√Ω khi ch·ªçn s·∫£n ph·∫©m t·ª´ t√¨m ki·∫øm
     */
    const handleProductSelected = (product) => {
        console.log('üì¶ [useProductManagement] Ch·ªçn s·∫£n ph·∫©m:', {
            product,
            id: product?.id,
            maCTSP: product?.maCTSP || product?.maCtsp,
            tenSP: product?.tenSP || product?.tenSanPham,
            soLuongTon: product?.soLuongTon,
            giaBan: product?.giaBan
        })

        // Validate product structure
        if (!product) {
            console.error('‚ùå [useProductManagement] Product is null or undefined')
            showError('L·ªói: Kh√¥ng c√≥ th√¥ng tin s·∫£n ph·∫©m!')
            return
        }

        if (!product.id) {
            console.error('‚ùå [useProductManagement] Product missing ID field!', product)
            showError(`L·ªói: S·∫£n ph·∫©m "${product.tenSP || product.tenSanPham || 'Unknown'}" kh√¥ng c√≥ ID h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i!`)
            return
        }

        selectedProduct.value = product
        soLuongNhap.value = 1
        showQuantityModal.value = true

        // Focus v√†o input s·ªë l∆∞·ª£ng
        nextTick(() => {
            if (quantityInput.value) {
                quantityInput.value.focus()
            }
        })
    }

    /**
     * X√°c nh·∫≠n th√™m s·∫£n ph·∫©m v√†o h√≥a ƒë∆°n
     */
    const confirmAddProduct = async () => {
        if (!selectedProduct.value || !hoaDonHienTai.value) {
            console.error('‚ùå [useProductManagement] Thi·∫øu th√¥ng tin:', {
                hasProduct: !!selectedProduct.value,
                hasHoaDon: !!hoaDonHienTai.value
            })
            return
        }

        if (soLuongNhap.value < 1 || soLuongNhap.value > (selectedProduct.value.soLuongTon || 0)) {
            showError('S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!')
            return
        }

        // Validate product ID
        const productId = selectedProduct.value.id
        if (!productId) {
            console.error('‚ùå [useProductManagement] Product ID b·ªã thi·∫øu!', selectedProduct.value)
            showError('L·ªói: Kh√¥ng t√¨m th·∫•y ID s·∫£n ph·∫©m. Vui l√≤ng ch·ªçn l·∫°i s·∫£n ph·∫©m!')
            return
        }

        // Check if ID is a valid UUID format
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i
        if (typeof productId !== 'string' || !uuidRegex.test(productId)) {
            console.error('‚ùå [useProductManagement] Product ID kh√¥ng ph·∫£i UUID h·ª£p l·ªá!', {
                productId,
                product: selectedProduct.value,
                type: typeof productId
            })
            showError(`L·ªói: ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá (${productId}). C√≥ th·ªÉ ƒë√¢y l√† m√£ s·∫£n ph·∫©m (${selectedProduct.value.maCTSP || selectedProduct.value.maCtsp}), kh√¥ng ph·∫£i UUID. Vui l√≤ng th·ª≠ l·∫°i!`)
            return
        }

        isLoading.value = true
        try {
            const payload = {
                chiTietSanPhamId: productId,
                soLuong: soLuongNhap.value
            }

            console.log('üì§ [useProductManagement] G·ª≠i y√™u c·∫ßu th√™m s·∫£n ph·∫©m:', {
                idHoaDon: hoaDonHienTai.value.id,
                payload,
                productInfo: {
                    tenSP: selectedProduct.value.tenSP || selectedProduct.value.tenSanPham,
                    maCTSP: selectedProduct.value.maCTSP || selectedProduct.value.maCtsp,
                    id: selectedProduct.value.id
                }
            })

            const response = await themSanPhamVaoHoaDon(hoaDonHienTai.value.id, payload)

            if (response && response.data) {
                // C·∫≠p nh·∫≠t h√≥a ƒë∆°n
                capNhatHoaDon(response.data)

                // ƒê√≥ng modal
                closeQuantityModal()

                console.log('‚úÖ [useProductManagement] Th√™m s·∫£n ph·∫©m th√†nh c√¥ng')
                showSuccess(`ƒê√£ th√™m "${selectedProduct.value.tenSP || selectedProduct.value.tenSanPham}" v√†o h√≥a ƒë∆°n!`)
            }
        } catch (error) {
            console.error('‚ùå [useProductManagement] L·ªói khi th√™m s·∫£n ph·∫©m:', error)

            // Log chi ti·∫øt response t·ª´ backend
            const errorData = error.response?.data
            console.error('‚ùå [useProductManagement] Chi ti·∫øt l·ªói:', {
                message: error.message,
                status: error.response?.status,
                statusText: error.response?.statusText,
                data: errorData,
                dataString: JSON.stringify(errorData, null, 2),
                payload: {
                    chiTietSanPhamId: selectedProduct.value.id,
                    soLuong: soLuongNhap.value
                }
            })

            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói chi ti·∫øt
            let errorMessage = 'Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i!'

            if (errorData) {
                // Backend c√≥ th·ªÉ tr·∫£ v·ªÅ nhi·ªÅu c·∫•u tr√∫c kh√°c nhau
                errorMessage = errorData.message ||
                    errorData.error ||
                    errorData.status ||
                    JSON.stringify(errorData)
            } else if (error.message) {
                errorMessage = error.message
            }

            console.error('‚ùå [useProductManagement] Th√¥ng b√°o l·ªói s·∫Ω hi·ªÉn th·ªã:', errorMessage)
            showError(`${errorMessage} (M√£ l·ªói: ${error.response?.status || 'Unknown'})`)
        } finally {
            isLoading.value = false
        }
    }

    /**
     * X√≥a s·∫£n ph·∫©m kh·ªèi h√≥a ƒë∆°n
     */
    const handleDeleteItem = async (idHoaDonChiTiet, productName = 's·∫£n ph·∫©m n√†y') => {
        // Hi·ªÉn th·ªã confirm dialog tr∆∞·ªõc khi x√≥a
        const confirmed = await showConfirm({
            title: 'X√°c nh·∫≠n x√≥a s·∫£n ph·∫©m',
            message: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a "${productName}" kh·ªèi h√≥a ƒë∆°n?`,
            confirmText: 'X√≥a',
            cancelText: 'H·ªßy',
            type: 'warning'
        })

        if (!confirmed) return

        isLoading.value = true
        try {
            const response = await xoaSanPhamKhoiHoaDon(idHoaDonChiTiet)

            if (response && response.data) {
                // C·∫≠p nh·∫≠t h√≥a ƒë∆°n
                capNhatHoaDon(response.data)

                console.log('X√≥a s·∫£n ph·∫©m th√†nh c√¥ng')
                showSuccess(`ƒê√£ x√≥a "${productName}" kh·ªèi h√≥a ƒë∆°n!`)
            }
        } catch (error) {
            console.error('L·ªói khi x√≥a s·∫£n ph·∫©m:', error)
            showError('Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i!')
        } finally {
            isLoading.value = false
        }
    }

    /**
     * Qu√©t m√£ IMEI/Serial v√† t·ª± ƒë·ªông th√™m s·∫£n ph·∫©m v√†o h√≥a ƒë∆°n
     */
    const handleScanImei = async (imeiCode) => {
        if (!hoaDonHienTai.value || !imeiCode) return

        console.log('Qu√©t m√£ IMEI/Barcode:', imeiCode)

        isLoading.value = true
        try {
            // 1. T√¨m s·∫£n ph·∫©m theo IMEI
            const response = await timSanPhamTheoIMEI(imeiCode)

            if (response && response.data) {
                const product = response.data

                // Ki·ªÉm tra t·ªìn kho
                if (!product.soLuongTon || product.soLuongTon < 1) {
                    showWarning('S·∫£n ph·∫©m n√†y ƒë√£ h·∫øt h√†ng!')
                    return
                }

                // 2. T·ª± ƒë·ªông th√™m v√†o h√≥a ƒë∆°n v·ªõi s·ªë l∆∞·ª£ng = 1
                const payload = {
                    chiTietSanPhamId: product.id,
                    soLuong: 1,
                    imei: imeiCode // G·ª≠i m√£ IMEI ƒë·ªÉ backend x·ª≠ l√Ω
                }

                const addResponse = await themSanPhamVaoHoaDon(hoaDonHienTai.value.id, payload)

                if (addResponse && addResponse.data) {
                    // C·∫≠p nh·∫≠t h√≥a ƒë∆°n
                    capNhatHoaDon(addResponse.data)

                    console.log('Th√™m s·∫£n ph·∫©m t·ª´ IMEI th√†nh c√¥ng:', product.tenSP)
                }
            }
        } catch (error) {
            console.error('L·ªói khi qu√©t m√£ IMEI:', error)
            const errorMessage = error.response?.data?.message || 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi m√£ IMEI n√†y!'
            showError(errorMessage)
        } finally {
            isLoading.value = false
        }
    }

    /**
     * ƒê√≥ng modal s·ªë l∆∞·ª£ng
     */
    const closeQuantityModal = () => {
        showQuantityModal.value = false
        selectedProduct.value = null
        soLuongNhap.value = 1
    }

    return {
        // State
        isLoading,
        showQuantityModal,
        selectedProduct,
        soLuongNhap,
        quantityInput,

        // Methods
        handleProductSelected,
        confirmAddProduct,
        handleDeleteItem,
        handleScanImei,
        closeQuantityModal
    }
}

